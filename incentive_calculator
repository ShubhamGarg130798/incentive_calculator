<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recovery Team Incentive Calculator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid #667eea;
        }
        
        .header h1 {
            color: #667eea;
            margin: 0;
            font-size: 2.5em;
            font-weight: 700;
        }
        
        .summary-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .summary-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }
        
        .summary-card h3 {
            margin: 0 0 10px 0;
            font-size: 1.1em;
        }
        
        .summary-card .amount {
            font-size: 1.8em;
            font-weight: bold;
            margin: 0;
        }
        
        .input-section {
            background: #f8f9ff;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            border: 2px solid #e1e8ff;
        }
        
        .input-section h3 {
            color: #667eea;
            margin-top: 0;
            font-size: 1.3em;
        }
        
        .target-input {
            margin-bottom: 20px;
        }
        
        .target-input label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }
        
        .target-input input {
            width: 200px;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .target-input input:focus {
            border-color: #667eea;
            outline: none;
        }
        
        .managers-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .manager-card {
            background: #ffffff;
            border: 2px solid #e1e8ff;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.05);
        }
        
        .manager-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: -20px -20px 15px -20px;
            text-align: center;
        }
        
        .manager-header h4 {
            margin: 0;
            font-size: 1.2em;
        }
        
        .executive-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            padding: 8px;
            border-radius: 6px;
            background: #f8f9ff;
        }
        
        .executive-row label {
            flex: 1;
            font-weight: 500;
            color: #555;
        }
        
        .executive-row input {
            width: 120px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: right;
        }
        
        .executive-row input:focus {
            border-color: #667eea;
            outline: none;
        }
        
        .executive-row .currency-unit {
            font-size: 12px;
            color: #666;
            margin-left: 5px;
            margin-right: 5px;
        }
        
        .executive-row .incentive {
            width: 100px;
            margin-left: 10px;
            background: #e8f2e8;
            font-weight: bold;
            color: #2e7d2e;
            border: 1px solid #c8e6c9;
        }
        
        .manager-total {
            background: #fff3cd;
            border: 2px solid #ffd93d;
            border-radius: 6px;
            padding: 10px;
            margin-top: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
        }
        
        .head-section {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 20px;
        }
        
        .head-section h3 {
            margin: 0 0 10px 0;
            font-size: 1.4em;
        }
        
        .head-incentive {
            font-size: 2em;
            font-weight: bold;
            margin: 0;
        }
        
        .calculate-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            margin-bottom: 20px;
            transition: transform 0.2s;
        }
        
        .calculate-btn:hover {
            transform: translateY(-2px);
        }
        
        .warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }
        
        .warning.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Recovery Team Incentive Calculator</h1>
            <p>NPA Collection Team | 90+ Days Overdue Accounts</p>
        </div>
        
        <div class="summary-section">
            <div class="summary-card">
                <h3>Total Recovery</h3>
                <p class="amount" id="totalRecovery">â‚¹0</p>
            </div>
            <div class="summary-card">
                <h3>Total Incentive Pool</h3>
                <p class="amount" id="totalPool">â‚¹0</p>
            </div>
            <div class="summary-card">
                <h3>Pool Utilization</h3>
                <p class="amount" id="poolUtilization">0%</p>
            </div>
            <div class="summary-card">
                <h3>Target Achievement</h3>
                <p class="amount" id="targetAchievement">0%</p>
            </div>
        </div>
        
        <div class="warning" id="warning">
            <strong>Note:</strong> <span id="warningText">Minimum recovery limit for incentives must be achieved.</span>
        </div>
        
        <div class="input-section">
            <h3>Team Structure Configuration</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                <div class="target-input">
                    <label for="numManagers">Number of Managers:</label>
                    <input type="number" id="numManagers" value="5" step="1" min="1" max="10" onchange="updateTeamStructure()">
                    <span>(1-10 managers)</span>
                </div>
                <div class="target-input">
                    <label for="execPerManager">Executives per Manager:</label>
                    <input type="number" id="execPerManager" value="5" step="1" min="1" max="15" onchange="updateTeamStructure()">
                    <span>(1-15 executives)</span>
                </div>
            </div>
            <div style="background: #f0f8ff; padding: 10px; border-radius: 6px; text-align: center; border: 1px solid #b3d9ff;">
                <strong>Team Size: </strong>
                <span id="totalTeamSize">31 members</span> 
                (1 Head + <span id="displayManagers">5</span> Managers + <span id="displayExecutives">25</span> Executives)
            </div>
        </div>
        
        <div class="input-section">
            <h3>Monthly Target & Incentive Settings</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                <div class="target-input">
                    <label for="monthlyTarget">Monthly Recovery Target:</label>
                    <input type="number" id="monthlyTarget" value="31" step="0.01" min="1" onchange="calculateIncentives()">
                    <span id="targetUnit">(â‚¹ Lakhs)</span>
                </div>
                <div class="target-input">
                    <label for="minIncentiveLimit">Minimum Recovery for Incentive:</label>
                    <input type="number" id="minIncentiveLimit" value="31" step="0.01" min="0" onchange="calculateIncentives()">
                    <span id="minUnit">(â‚¹ Lakhs)</span>
                    <small style="color: #666; font-size: 12px; display: block; margin-top: 5px;">Below this amount, no incentives will be paid</small>
                </div>
            </div>
            <div style="margin-top: 20px; padding: 15px; background: #e8f4f8; border-radius: 8px; border-left: 4px solid #667eea;">
                <h4 style="margin-top: 0; color: #667eea;">ðŸ’° Currency Options:</h4>
                <div style="display: flex; gap: 20px; align-items: center;">
                    <label style="display: flex; align-items: center; gap: 5px; cursor: pointer;">
                        <input type="radio" name="currency" value="lakhs" checked onchange="toggleCurrency()">
                        <span>Enter in Lakhs (â‚¹)</span>
                    </label>
                    <label style="display: flex; align-items: center; gap: 5px; cursor: pointer;">
                        <input type="radio" name="currency" value="rupees" onchange="toggleCurrency()">
                        <span>Enter in Rupees (â‚¹)</span>
                    </label>
                </div>
            </div>
        </div>
        
        <div style="background: #fff3cd; border: 2px solid #ffd93d; border-radius: 8px; padding: 15px; margin-bottom: 20px; text-align: center;">
            <h3 style="margin: 0 0 10px 0; color: #856404;">ðŸ‘‡ Enter Collection Amounts Below</h3>
            <p style="margin: 0; color: #856404; font-weight: 500;">In each Manager section, enter the recovery amount (in lakhs) for each executive</p>
        </div>
        
        <button class="calculate-btn" onclick="calculateIncentives()">Calculate All Incentives</button>
        
        <div class="managers-section" id="managersSection">
            <!-- Manager cards will be generated by JavaScript -->
        </div>
        
        <div class="head-section">
            <h3>Collection Head Incentive</h3>
            <p class="head-incentive" id="headIncentive">â‚¹0</p>
        </div>
    </div>

    <script>
        let isRupeesMode = false;
        let numManagers = 5;
        let execPerManager = 5;
        
        function updateTeamStructure() {
            numManagers = parseInt(document.getElementById('numManagers').value) || 5;
            execPerManager = parseInt(document.getElementById('execPerManager').value) || 5;
            
            const totalExecutives = numManagers * execPerManager;
            const totalTeamSize = 1 + numManagers + totalExecutives;
            
            // Update display
            document.getElementById('displayManagers').textContent = numManagers;
            document.getElementById('displayExecutives').textContent = totalExecutives;
            document.getElementById('totalTeamSize').textContent = totalTeamSize + ' members';
            
            // Rebuild the form
            initializeForm();
        }
        
        function toggleCurrency() {
            const currencyMode = document.querySelector('input[name="currency"]:checked').value;
            isRupeesMode = (currencyMode === 'rupees');
            
            // Update all unit labels
            const targetUnit = document.getElementById('targetUnit');
            const minUnit = document.getElementById('minUnit');
            const currencyUnits = document.querySelectorAll('.currency-unit');
            
            if (isRupeesMode) {
                targetUnit.textContent = '(â‚¹ Rupees)';
                minUnit.textContent = '(â‚¹ Rupees)';
                currencyUnits.forEach(unit => unit.textContent = '(â‚¹ Rupees)');
                
                // Convert existing values from lakhs to rupees
                convertExistingValues(100000); // multiply by 100000
            } else {
                targetUnit.textContent = '(â‚¹ Lakhs)';
                minUnit.textContent = '(â‚¹ Lakhs)';
                currencyUnits.forEach(unit => unit.textContent = '(â‚¹ Lakhs)');
                
                // Convert existing values from rupees to lakhs
                convertExistingValues(0.00001); // divide by 100000
            }
            
            calculateIncentives();
        }
        
        function convertExistingValues(multiplier) {
            // Convert target values
            const monthlyTarget = document.getElementById('monthlyTarget');
            const minIncentiveLimit = document.getElementById('minIncentiveLimit');
            
            if (monthlyTarget.value) {
                monthlyTarget.value = (parseFloat(monthlyTarget.value) * multiplier).toFixed(2);
            }
            if (minIncentiveLimit.value) {
                minIncentiveLimit.value = (parseFloat(minIncentiveLimit.value) * multiplier).toFixed(2);
            }
            
            // Convert executive values
            for (let i = 1; i <= numManagers; i++) {
                for (let j = 1; j <= execPerManager; j++) {
                    const execId = `manager${i}_exec${j}`;
                    const input = document.getElementById(execId);
                    if (input && input.value) {
                        input.value = (parseFloat(input.value) * multiplier).toFixed(2);
                    }
                }
            }
        }
        
        // Initialize the form with manager and executive structure
        function initializeForm() {
            const managersSection = document.getElementById('managersSection');
            managersSection.innerHTML = '';
            
            for (let i = 1; i <= numManagers; i++) {
                const managerCard = document.createElement('div');
                managerCard.className = 'manager-card';
                
                let executivesHTML = '';
                for (let j = 1; j <= execPerManager; j++) {
                    const execId = `manager${i}_exec${j}`;
                    executivesHTML += `
                        <div class="executive-row">
                            <label>Executive ${j}:</label>
                            <input type="number" id="${execId}" placeholder="Enter amount" step="0.01" min="0" onchange="calculateIncentives()">
                            <span class="currency-unit">(â‚¹ Lakhs)</span>
                            <input type="text" class="incentive" id="${execId}_incentive" readonly placeholder="â‚¹0">
                        </div>
                    `;
                }
                
                managerCard.innerHTML = `
                    <div class="manager-header">
                        <h4>Manager ${i} & Team</h4>
                    </div>
                    ${executivesHTML}
                    <div class="manager-total">
                        <span>Manager ${i} Recovery:</span>
                        <span id="manager${i}_total">â‚¹0</span>
                    </div>
                    <div class="manager-total" style="background: #d1ecf1; border-color: #bee5eb;">
                        <span>Manager ${i} Incentive:</span>
                        <span id="manager${i}_incentive">â‚¹0</span>
                    </div>
                `;
                
                managersSection.appendChild(managerCard);
            }
            
            calculateIncentives();
        }
        
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }
        
        function calculateIncentives() {
            const monthlyTarget = parseFloat(document.getElementById('monthlyTarget').value) || (isRupeesMode ? 3100000 : 31);
            const minIncentiveLimit = parseFloat(document.getElementById('minIncentiveLimit').value) || (isRupeesMode ? 3100000 : 31);
            let totalRecovery = 0;
            const managerRecoveries = [];
            
            // Calculate total recovery and individual recoveries
            for (let i = 1; i <= numManagers; i++) {
                let managerTotal = 0;
                const executiveRecoveries = [];
                
                for (let j = 1; j <= execPerManager; j++) {
                    const execId = `manager${i}_exec${j}`;
                    const input = document.getElementById(execId);
                    let recovery = 0;
                    if (input) {
                        recovery = parseFloat(input.value) || 0;
                        // Convert to lakhs for internal calculations
                        if (isRupeesMode) {
                            recovery = recovery / 100000;
                        }
                    }
                    executiveRecoveries.push(recovery);
                    managerTotal += recovery;
                }
                
                managerRecoveries.push({
                    total: managerTotal,
                    executives: executiveRecoveries
                });
                totalRecovery += managerTotal;
                
                // Update manager total display
                const totalElement = document.getElementById(`manager${i}_total`);
                if (totalElement) {
                    totalElement.textContent = formatCurrency(managerTotal * 100000);
                }
            }
            
            // Convert targets to lakhs for comparison
            const targetInLakhs = isRupeesMode ? monthlyTarget / 100000 : monthlyTarget;
            const minLimitInLakhs = isRupeesMode ? minIncentiveLimit / 100000 : minIncentiveLimit;
            
            // Update summary
            document.getElementById('totalRecovery').textContent = formatCurrency(totalRecovery * 100000);
            
            const targetAchievement = (totalRecovery / targetInLakhs) * 100;
            document.getElementById('targetAchievement').textContent = targetAchievement.toFixed(1) + '%';
            
            // Check if minimum incentive limit is met
            const warning = document.getElementById('warning');
            const warningText = document.getElementById('warningText');
            if (totalRecovery < minLimitInLakhs) {
                warning.classList.add('show');
                const displayMinLimit = isRupeesMode ? (minLimitInLakhs * 100000).toLocaleString('en-IN') : minLimitInLakhs;
                const displayCurrent = isRupeesMode ? (totalRecovery * 100000).toLocaleString('en-IN') : totalRecovery.toFixed(2);
                const unit = isRupeesMode ? 'rupees' : 'lakhs';
                warningText.textContent = `Minimum recovery of â‚¹${displayMinLimit} ${unit} must be achieved for incentives to be paid. Current: â‚¹${displayCurrent} ${unit}`;
                // Set all incentives to 0
                setAllIncentivesToZero();
                document.getElementById('totalPool').textContent = 'â‚¹0';
                document.getElementById('poolUtilization').textContent = '0%';
                return;
            } else {
                warning.classList.remove('show');
            }
            
            // Calculate incentive pool (20% of total recovery)
            const totalPoolAmount = totalRecovery * 0.20;
            document.getElementById('totalPool').textContent = formatCurrency(totalPoolAmount * 100000);
            document.getElementById('poolUtilization').textContent = '20.0%';
            
            // Allocate pool between levels
            const executivePool = totalPoolAmount * 0.60; // 60%
            const managerPool = totalPoolAmount * 0.25;   // 25%
            const headPool = totalPoolAmount * 0.15;      // 15%
            
            // Calculate Executive Incentives - SIMPLIFIED APPROACH
            for (let i = 1; i <= numManagers; i++) {
                const managerTotal = managerRecoveries[i-1].total;
                
                if (managerTotal > 0) {
                    // This manager's team gets their proportional share of executive pool
                    const managerExecutivePool = executivePool * (managerTotal / totalRecovery);
                    
                    // Each executive gets based on their individual recovery within their team
                    for (let j = 1; j <= execPerManager; j++) {
                        const execId = `manager${i}_exec${j}`;
                        const execRecovery = managerRecoveries[i-1].executives[j-1];
                        
                        let execIncentive = 0;
                        if (execRecovery > 0) {
                            // Executive gets their proportional share of manager's executive pool
                            execIncentive = managerExecutivePool * (execRecovery / managerTotal);
                        }
                        
                        const incentiveElement = document.getElementById(`${execId}_incentive`);
                        if (incentiveElement) {
                            incentiveElement.value = formatCurrency(execIncentive * 100000);
                        }
                    }
                }
            }
            
            // Calculate Manager Incentives - SIMPLIFIED
            for (let i = 1; i <= numManagers; i++) {
                const managerTotal = managerRecoveries[i-1].total;
                let managerIncentive = 0;
                
                if (totalRecovery > 0) {
                    // Manager gets their proportional share of manager pool
                    managerIncentive = managerPool * (managerTotal / totalRecovery);
                }
                
                const managerIncentiveElement = document.getElementById(`manager${i}_incentive`);
                if (managerIncentiveElement) {
                    managerIncentiveElement.textContent = formatCurrency(managerIncentive * 100000);
                }
            }
            
            // Calculate Head Incentive - SIMPLIFIED
            let headIncentive = headPool; // Head gets fixed 15% of total pool
            document.getElementById('headIncentive').textContent = formatCurrency(headIncentive * 100000);
        }
        
        function setAllIncentivesToZero() {
            // Set all executive incentives to 0
            for (let i = 1; i <= numManagers; i++) {
                for (let j = 1; j <= execPerManager; j++) {
                    const execId = `manager${i}_exec${j}`;
                    const incentiveElement = document.getElementById(`${execId}_incentive`);
                    if (incentiveElement) {
                        incentiveElement.value = 'â‚¹0';
                    }
                }
                const managerIncentiveElement = document.getElementById(`manager${i}_incentive`);
                if (managerIncentiveElement) {
                    managerIncentiveElement.textContent = 'â‚¹0';
                }
            }
            document.getElementById('headIncentive').textContent = 'â‚¹0';
        }
        
        function updateLiveExample(totalRecovery, totalPool, execPool, mgrPool, headPool) {
            if (totalRecovery > 0) {
                const example = `
                    <div style="background: white; padding: 10px; border-radius: 6px; margin-top: 10px; border: 1px solid #ddd;">
                        <strong>ðŸ§® Live Example with Your Numbers:</strong><br>
                        Total Recovery: â‚¹${(totalRecovery).toFixed(2)} lakhs<br>
                        Total Pool (20%): â‚¹${(totalPool).toFixed(2)} lakhs<br>
                        â€¢ Executives get: â‚¹${(execPool).toFixed(2)} lakhs (60%)<br>
                        â€¢ Managers get: â‚¹${(mgrPool).toFixed(2)} lakhs (25%)<br>
                        â€¢ Head gets: â‚¹${(headPool).toFixed(2)} lakhs (15%)
                    </div>
                `;
                document.getElementById('liveExample').innerHTML = example;
            } else {
                document.getElementById('liveExample').innerHTML = '';
            }
        }
        
        // Initialize the form when page loads
        window.onload = function() {
            updateTeamStructure(); // This will call initializeForm()
        };
    </script>
</body>
</html>
